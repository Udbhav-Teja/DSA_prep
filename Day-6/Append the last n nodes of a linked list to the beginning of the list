//Append the last n nodes of a linked list to the beginning of the list.

import java.util.*;

public class Main {

  public static void main (String[]args) throws Exception {
    LinkedList ll = new LinkedList ();
      ll.addFirst (60);
      ll.addFirst (50);
      ll.addFirst (40);
      ll.addFirst (30);
      ll.addFirst (20);
      ll.addFirst (10);

      ll.display ();

      ll.appendToFront (3);

      ll.display ();
  }

}
class LinkedList {
  private class Node {
    int data;
    Node next;
    public Node (int data, Node next) {
      this.data = data;
      this.next = next;
    }
  }

  private Node head;
  private Node tail;
  private int size;

  public LinkedList () {
    this.head = null;
    this.tail = null;
    this.size = 0;

  }
  public int size () {
    return this.size;
  }
  
  public boolean isEmpty () {
    return this.size () == 0;
  }

  public void display () {
    Node temp = head;
    while (temp != null) {
	    System.out.print (temp.data + ">");
	    temp = temp.next;
    }
    System.out.println ("END");
  }
  public void addFirst (int item) {
    Node temp = new Node (item, head);
    if (this.size == 0) {
	    this.head = this.tail = temp;
    }
    else {
	        this.head = temp;
        }
    this.size++;
  }

  public int kthFromLast (int k) {
    return this.kthNodeFromLast (k).data;

  }
  private Node kthNodeFromLast (int k) {
    Node slow = this.head;
    Node fast = this.head;
    for (int i = 0; i < k; i++) {
	    fast = fast.next;
    }
    while (fast != null) {
	    fast = fast.next;
	    slow = slow.next;
    }
    return slow;
  }

  public void appendToFront (int n) {
    Node np1 = this.kthNodeFromLast (n + 1);
    Node nth = np1.next;
    np1.next = null;
    this.tail.next = this.head;
    this.head = nth;
    this.tail = np1;
  }
}
